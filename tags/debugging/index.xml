<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debugging on Reside-IC</title>
    <link>https://reside-ic.github.io/tags/debugging/</link>
    <description>Recent content in Debugging on Reside-IC</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 10 Jun 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://reside-ic.github.io/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging memory errors with valgrind and gdb</title>
      <link>https://reside-ic.github.io/blog/debugging-memory-errors-with-valgrind-and-gdb/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://reside-ic.github.io/blog/debugging-memory-errors-with-valgrind-and-gdb/</guid>
      <description>Many R packages use C or C++ code to power performance-critical sections of code. These langauges are easy to shoot yourself in the foot with, as seemingly innocuous code may cause crashes (or just junk output) by reading from memory that is uninitialised or out of range. There are a couple of tools for helping diagnose this sort of issue:&#xA;&amp;ldquo;valgrind&amp;rdquo; is great for tracking down is sort of error as it highlights invalid memory accesses &amp;ldquo;gdb&amp;rdquo; can be used to step through a program, or inspect the internal state after a crash We&amp;rsquo;ve already written about debugging R packages with valgrind and gdb separately here.</description>
    </item>
  </channel>
</rss>
